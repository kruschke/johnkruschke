goodPer = as.vector(as.matrix(FinalData[,"obli1_2"])) ,
approv = as.vector(as.matrix(FinalData[,"obli1_4"])) ,
notXbadPer = as.vector(as.matrix(FinalData[,"obli2_1"])) ,
notXdisapp = as.vector(as.matrix(FinalData[,"obli2_3"])),
wrong = as.vector(as.matrix(FinalData[,"wrong"])) ,
badPer = as.vector(as.matrix(FinalData[,"obli1_1"])) ,
disapp = as.vector(as.matrix(FinalData[,"obli1_3"])),
notXgoodPer = as.vector(as.matrix(FinalData[,"obli2_2"])) ,
notXapprov = as.vector(as.matrix(FinalData[,"obli2_4"]))
)
psych::pairs.panels( combMat , gap=0 , pch="." )
psych::alpha( combMat , check.keys=TRUE)
# Chunk 12
# Function linTrans() converts from x1,x2 input range to y1,y2 output range.
linTrans = function( x , x1=1 , x2=7 , y1=-1 , y2=+1 ) {
slope = (y2-y1)/(x2-x1)
intercept = y1 - slope*x1
return( intercept + slope*x )
}
# Combine several related questions into one score.
CombinOblig = (
linTrans( FinalData[, "obligatory"] ,
x1=1, x2=7, y1=-1, y2=+1 )
+ linTrans( FinalData[,"should"],
x1=1, x2=7, y1=-1, y2=+1 )
+ linTrans( FinalData[,"wrong"] ,
x1=1, x2=5, y1=0, y2=-1 )
+ linTrans( FinalData[,"notXwrong"] ,
x1=1, x2=5, y1=0, y2=+1 )
+ linTrans( FinalData[,"obli1_1"] ,     #badperson
x1=1, x2=7, y1=0, y2=-1 )
+ linTrans( FinalData[,"obli1_2"] ,     #goodperson
x1=1, x2=7, y1=0, y2=+1 )
+ linTrans( FinalData[,"obli2_1"] ,     #notXbadperson
x1=1, x2=7, y1=0, y2=+1 )
+ linTrans( FinalData[,"obli2_2"] ,     #notXgoodperson
x1=1, x2=7, y1=0, y2=-1 )
+ linTrans( FinalData[,"obli1_4"] ,     #approve
x1=1, x2=7, y1=0, y2=+1 )
+ linTrans( FinalData[,"obli1_3"] ,     #disapprove
x1=1, x2=7, y1=0, y2=-1 )
+ linTrans( FinalData[,"obli2_4"] ,     #notXapprove
x1=1, x2=7, y1=0, y2=-1 )
+ linTrans( FinalData[,"obli2_3"] ,     #notXdisapprove
x1=1, x2=7, y1=0, y2=+1 )
) / 7
## CombinOblig:
# -1 = forbidden
# 0 = permitted
# +1 = obligatory
FinalData$CombinOblig = format(round(CombinOblig, 4))
FinalData$CombinOblig = as.numeric(FinalData$CombinOblig)
# Chunk 13
aggregate(ThreatFreedom ~ action + message, data = FinalData, FUN = mean)
aggregate(Anger ~ action + message, data = FinalData, FUN = mean)
aggregate(NegCog ~ action + message, data = FinalData, FUN = mean)
aggregate(Reactance ~ action + message, data = FinalData, FUN = mean)
aggregate(Intention ~ action + message, data = FinalData, FUN = mean)
aggregate(PIE ~ action + message, data = FinalData, FUN = mean)
aggregate(CombinOblig ~ action + message, data = FinalData, FUN = mean)
# Chunk 14
ggplot(FinalData[FinalData$message %in% "highThreat", ], aes(PIE, Reactance, col = action)) +
geom_point() +
xlim(1,7) +
ylim(1,5) +
ggtitle("High Threat Message") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(FinalData[FinalData$message %in% "lowThreat", ], aes(PIE, Reactance, col = action)) +
geom_point() +
xlim(1,7) +
ylim(1,5) +
ggtitle("Low Threat Message") +
theme(plot.title = element_text(hjust = 0.5))
# Chunk 15
ggplot(FinalData[FinalData$message %in% "highThreat", ], aes(CombinOblig, Reactance, col = action)) +
geom_point() +
xlim(-1,1) +
ylim(1,5) +
ggtitle("High Threat Message") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(FinalData[FinalData$message %in% "lowThreat", ], aes(CombinOblig, Reactance, col = action)) +
geom_point() +
xlim(-1,1) +
ylim(1,5) +
ggtitle("Low Threat Message") +
theme(plot.title = element_text(hjust = 0.5))
# Chunk 16
ggplot(FinalData[FinalData$message %in% "highThreat", ], aes(CombinOblig, PIE, col = action)) +
geom_point() +
xlim(-1,1) +
ylim(1,7) +
ggtitle("High Threat Message") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(FinalData[FinalData$message %in% "lowThreat", ], aes(CombinOblig, PIE, col = action)) +
geom_point() +
xlim(-1,1) +
ylim(1,7) +
ggtitle("Low Threat Message") +
theme(plot.title = element_text(hjust = 0.5))
# Chunk 17
# single subject & average across the subjects
FinalData$subject_number = as.factor(FinalData$subject_number)
str(FinalData)
# Chunk 18
# Function for plotting data with model curves:
plotLmerTrend = function( theData = FinalLowThreat , # must be what was submitted to lmer()
theLmer = ReactPIE_Low ,   # the result of lmer()
theDV = "Reactance" ,
theIV = "PIE" ,
thePV = "subject_number" , # panel variable
trendColor = "red2" ) {
#---------------------------------------------------------------
# Display collapsed data:
par(mfrow=c(1,1))
par( mgp=c(2.0,0.7,0) , mar=c(4,4,3,1) )
plot( y=theData[,theDV] , x=theData[,theIV] , col=theData[,thePV] ,
ylab=theDV , xlab=theIV ,
sub=paste0("symbol color: ",thePV) )
# Superimpose fixed-effect trend:
xcomb = seq( min(theData[,theIV]) , max(theData[,theIV]) , length=301 )
ycomb = 0*xcomb
for ( p in 1:length(fixef(theLmer)) ) {
ycomb = ycomb + fixef(theLmer)[p] * xcomb^(p-1)
}
lines( x=xcomb , y=ycomb , col=trendColor , lwd=4 )
title( main="All Data with Fixed-Effect Trend" )
#---------------------------------------------------------------
# Display individual panels:
# Specify number of rows per set of panels:
nRowPanel = 4
# Compute number of sets of panel displays:
nSet = ceiling(length(unique(theData[,thePV]))/(nRowPanel^2))
# Display the sets of panels:
for ( setIdx in 1:nSet ) {
# Open new graphics display with multiple panels:
par(mfrow=c(nRowPanel,nRowPanel))
par( mgp=c(2.0,0.7,0) , mar=c(4,4,3,1) )
# Determine indices for this set of panels:
pVec = seq( (setIdx-1)*(nRowPanel^2)+1 ,
min( (setIdx)*(nRowPanel^2) , length(unique(theData[,thePV])) ) )
# Plot the panels:
for ( pIdx in pVec ) {
# Data:
thisSubj = unique(theData[,thePV])[pIdx]
thisSubjRow = theData[,thePV]==thisSubj
plot( y=theData[thisSubjRow,theDV] , x=theData[thisSubjRow,theIV] ,
ylim=range(theData[,theDV]) , xlim=range(theData[,theIV]) ,
ylab=theDV , xlab=theIV , main=paste0("Subj: ",thisSubj) )
# Superimpose the random-effect trend:
xcomb = seq( min(theData[,theIV]) , max(theData[,theIV]) , length=301 )
ycomb = 0*xcomb
for ( p in 1:length(fixef(theLmer)) ) {
ycomb = ( ycomb
+ ( fixef(theLmer)[p] + (ranef(theLmer)[[thePV]])[pIdx,p] )
* xcomb^(p-1) )
}
lines( x=xcomb , y=ycomb , col=trendColor , lwd=3 )
}
}
# at exit, re-set display panels:
par(mfrow=c(1,1))
}
# Chunk 19
FinalLowThreat = FinalData[FinalData$message == "lowThreat", ]
FinalHighThreat = FinalData[FinalData$message == "highThreat", ]
# Chunk 20
# Low Threat message
ReactPIE_Low = lmer( Reactance ~ 1 + PIE + (1 + PIE | subject_number) ,
data = FinalLowThreat )
show(ReactPIE_Low)
summary(ReactPIE_Low)
## plot data with model trend:
plotLmerTrend( theData = FinalLowThreat , # must be what was submitted to lmer()
theLmer = ReactPIE_Low ,   # the result of lmer()
theDV = "Reactance" ,
theIV = "PIE" ,
thePV = "subject_number" , # panel variable
trendColor = "red2")
# Chunk 21
# High Threat message
ReactPIE_High = lmer( Reactance ~ 1 + PIE + (1 + PIE | subject_number) ,
data = FinalHighThreat )
show(ReactPIE_High)
summary(ReactPIE_High)
## plot data with model trend:
plotLmerTrend( theData = FinalHighThreat , # must be what was submitted to lmer()
theLmer = ReactPIE_High ,   # the result of lmer()
theDV = "Reactance" ,
theIV = "PIE" ,
thePV = "subject_number" , # panel variable
trendColor = "red2" )
# Housekeeping:
graphics.off()
rm(list=ls())
# Load packages:
library("lattice")
library("psych")
library("dplyr")
library("ggplot2")
library("ggpubr")
library("lme4")
library("lmerTest")
library("dfoptim") # for checking fit of lmer()
library("optimx") # for checking fit of lmer()
# Chunk 1
knitr::opts_chunk$set( error=TRUE , fig.align="center" , fig.asp=1.0)
# Chunk 2
# Housekeeping:
graphics.off()
rm(list=ls())
# Load packages:
library("lattice")
library("psych")
library("dplyr")
library("ggplot2")
library("ggpubr")
library("lme4")
library("lmerTest")
library("dfoptim") # for checking fit of lmer()
library("optimx") # for checking fit of lmer()
# Chunk 3
# Read in data
DataOrig = read.csv( "MainData.csv" , header=TRUE )
# Extract header info from top rows:
nHeaderRows = 2
headerInfo = DataOrig[1:nHeaderRows,]
# Remove header and convert columns to appropriate types:
Data = type.convert( DataOrig[-(1:nHeaderRows),] , as.is=TRUE )
dim( Data )
# Chunk 4
# Include only rows who finished the survey, gave consent, and did not use
Data = Data[ ( Data$Finished == 1
& Data$consent == 2), ]
dim( Data )
# Remove irrelevant columns (e.g., date, IP address, etc.):
irrelCols = which( colnames(Data)
%in% c("StartDate", "EndDate", "Status", "IPAddress",
"Progress", "Finished", "RecordedDate", "ResponseId",
"RecipientLastName", "RecipientFirstName",
"RecipientEmail", "ExternalReference",
#"LocationLatitude", "LocationLongitude",
"DistributionChannel", "UserLanguage",
"metaInfo._Version") )
Data = Data[, -irrelCols]
# Same for the "headerInfo"
# Remove irrelevant columns (e.g., date, IP address, etc.):
irrelCols = which( colnames(headerInfo)
%in% c("StartDate", "EndDate", "Status", "IPAddress",
"Progress", "Finished", "RecordedDate", "ResponseId",
"RecipientLastName", "RecipientFirstName",
"RecipientEmail", "ExternalReference",
#"LocationLatitude", "LocationLongitude",
"DistributionChannel", "UserLanguage",
"metaInfo._Version") )
headerInfo = headerInfo[, -irrelCols]
# Chunk 5
# Attention check. Specify correct responses for the 10 attention checks, in
# order.
# 1: drive driving                                 - Agree (6)
# 2: stealing                                      - Agree (6)
# 3: littering                                     - Agree (6)
# 4: posting a review                              - Disagree (2)
# 5: drinking soda                                 - Disagree (2)
# 6: listening to classical music                  - Disagree (2)
# 7: verbally reprimanding someone who litters     - Disagree (2)
# 8: donating to charity                           - Strongly agree (7)
# 9: recycling                                     - Strongly agree (7)
# 10: getting a vaccine                            - Strongly agree (7)
correctResp = c( 6, 6, 6, 2, 2, 2, 2, 7, 7, 7 )
# Compute number of correct attention checks for each subject.
# attention check labels contain characters "obli1_5"
names(Data)[names(Data) == 'obli1_5'] = 'obli1_5.0'
nSubj = nrow(Data)
nCorrect = rep(NA,nSubj)
for ( sIdx in 1:nSubj ) {
subjResp = Data[ sIdx, paste0("obli1_5.", 0:19) ]
nCorrect[sIdx] = sum( correctResp == subjResp , na.rm = TRUE)
}
# Append nCorrect to Data:
Data$nCorrect = nCorrect
# Specify minimum attention-check correct, and remove sub-crit participants:
minAttnCorrect = 8/10 - 0.000001 # subtract tiny margin to be sure inequality works
Data = Data[ Data$nCorrect/10 >= minAttnCorrect , ]
dim( Data )
## Add a subject number
Data$subject_number = 1:nrow(Data)
# Chunk 6
# Extract Action order columns:
ActionOrder = Data[, c("FL_6_DO","FL_7_DO")]
## Append message level column
Data$MessageLevel = ifelse(!(Data$FL_6_DO==""), "HighThreat",  "LowThreat")
# Remove columns with "DO"
NewData = Data %>% select(-contains("_DO"))
headerInfo = headerInfo %>% select(-contains("_DO"))
HighThreat = NewData[NewData$MessageLevel == "HighThreat", ]
LowThreat = NewData[NewData$MessageLevel == "LowThreat", ]
# There were errors in column names when Qualtrics saved the data (e.g.,
# "intent1") this messed up the pattern, so manually extracting action data:
subjColNum = 712 # column 712 is subject_number
drunkdrive_HT_ColNum = 12:42
drunkdrive_HT = HighThreat[,c(drunkdrive_HT_ColNum,subjColNum)]
drunkdrive_HT$action = "drunkdrive"
drunkdrive_HT$message = "highThreat"
# Visually check that columns are as intended:
cbind( colnames(HighThreat[,drunkdrive_HT_ColNum]) ,
colnames(headerInfo[1,drunkdrive_HT_ColNum]) ,
colnames(HighThreat[,drunkdrive_HT_ColNum])
== colnames(headerInfo[1,drunkdrive_HT_ColNum]) ,
unname(unlist(headerInfo[1,drunkdrive_HT_ColNum])) )
steal_HT_ColNum = 47:77
steal_HT = HighThreat[,c(steal_HT_ColNum,subjColNum)]
steal_HT$action = "steal"
steal_HT$message = "highThreat"
# Visually check that columns are as intended:
cbind( colnames(HighThreat[,steal_HT_ColNum]) ,
colnames(headerInfo[1,steal_HT_ColNum]) ,
colnames(HighThreat[,steal_HT_ColNum])
== colnames(headerInfo[1,steal_HT_ColNum]) ,
unname(unlist(headerInfo[1,steal_HT_ColNum])) )
litter_HT_ColNum = 82:112
litter_HT = HighThreat[,c(litter_HT_ColNum,subjColNum)]
litter_HT$action = "litter"
litter_HT$message = "highThreat"
# Visually check that columns are as intended:
cbind( colnames(HighThreat[,litter_HT_ColNum]) ,
colnames(headerInfo[1,litter_HT_ColNum]) ,
colnames(HighThreat[,litter_HT_ColNum])
== colnames(headerInfo[1,litter_HT_ColNum]) ,
unname(unlist(headerInfo[1,litter_HT_ColNum])) )
review_HT_ColNum = 117:147
review_HT = HighThreat[,c(review_HT_ColNum,subjColNum)]
review_HT$action = "review"
review_HT$message = "highThreat"
# Visually check that columns are as intended:
cbind( colnames(HighThreat[,review_HT_ColNum]) ,
colnames(headerInfo[1,review_HT_ColNum]) ,
colnames(HighThreat[,review_HT_ColNum])
== colnames(headerInfo[1,review_HT_ColNum]) ,
unname(unlist(headerInfo[1,review_HT_ColNum])) )
soda_HT_ColNum = 152:182
soda_HT = HighThreat[,c(soda_HT_ColNum,subjColNum)]
soda_HT$action = "soda"
soda_HT$message = "highThreat"
# Visually check that columns are as intended:
cbind( colnames(HighThreat[,soda_HT_ColNum]) ,
colnames(headerInfo[1,soda_HT_ColNum]) ,
colnames(HighThreat[,soda_HT_ColNum])
== colnames(headerInfo[1,soda_HT_ColNum]) ,
unname(unlist(headerInfo[1,soda_HT_ColNum])) )
listen_HT_ColNum = 187:217
listen_HT = HighThreat[,c(listen_HT_ColNum,subjColNum)]
listen_HT$action = "listen"
listen_HT$message = "highThreat"
# Visually check that columns are as intended:
cbind( colnames(HighThreat[,listen_HT_ColNum]) ,
colnames(headerInfo[1,listen_HT_ColNum]) ,
colnames(HighThreat[,listen_HT_ColNum])
== colnames(headerInfo[1,listen_HT_ColNum]) ,
unname(unlist(headerInfo[1,listen_HT_ColNum])) )
verbal_HT_ColNum = 222:252
verbal_HT = HighThreat[,c(verbal_HT_ColNum,subjColNum)]
verbal_HT$action = "verbal"
verbal_HT$message = "highThreat"
# Visually check that columns are as intended:
cbind( colnames(HighThreat[,verbal_HT_ColNum]) ,
colnames(headerInfo[1,verbal_HT_ColNum]) ,
colnames(HighThreat[,verbal_HT_ColNum])
== colnames(headerInfo[1,verbal_HT_ColNum]) ,
unname(unlist(headerInfo[1,verbal_HT_ColNum])) )
donate_HT_ColNum = 257:287
donate_HT = HighThreat[,c(donate_HT_ColNum,subjColNum)]
donate_HT$action = "donate"
donate_HT$message = "highThreat"
# Visually check that columns are as intended:
cbind( colnames(HighThreat[,donate_HT_ColNum]) ,
colnames(headerInfo[1,donate_HT_ColNum]) ,
colnames(HighThreat[,donate_HT_ColNum])
== colnames(headerInfo[1,donate_HT_ColNum]) ,
unname(unlist(headerInfo[1,donate_HT_ColNum])) )
recycle_HT_ColNum = 292:322
recycle_HT = HighThreat[,c(recycle_HT_ColNum,subjColNum)]
recycle_HT$action = "recycle"
recycle_HT$message = "highThreat"
# Visually check that columns are as intended:
cbind( colnames(HighThreat[,recycle_HT_ColNum]) ,
colnames(headerInfo[1,recycle_HT_ColNum]) ,
colnames(HighThreat[,recycle_HT_ColNum])
== colnames(headerInfo[1,recycle_HT_ColNum]) ,
unname(unlist(headerInfo[1,recycle_HT_ColNum])) )
vaccine_HT_ColNum = 327:357
vaccine_HT = HighThreat[,c(vaccine_HT_ColNum,subjColNum)]
vaccine_HT$action = "vaccine"
vaccine_HT$message = "highThreat"
# Visually check that columns are as intended:
cbind( colnames(HighThreat[,vaccine_HT_ColNum]) ,
colnames(headerInfo[1,vaccine_HT_ColNum]) ,
colnames(HighThreat[,vaccine_HT_ColNum])
== colnames(headerInfo[1,vaccine_HT_ColNum]) ,
unname(unlist(headerInfo[1,vaccine_HT_ColNum])) )
colnames(vaccine_HT) = colnames(recycle_HT) = colnames(donate_HT) = colnames(verbal_HT) = colnames(listen_HT) =
colnames(soda_HT) = colnames(review_HT) = colnames(litter_HT) = colnames(steal_HT) = colnames(drunkdrive_HT)
highThreat = rbind(drunkdrive_HT, steal_HT, litter_HT, review_HT, soda_HT, listen_HT, verbal_HT, donate_HT,
recycle_HT, vaccine_HT)
## column patterns are messier with the low threat subset, so manually extracting.
drunkdrive_LT_ColNum = 362:392
drunkdrive_LT = LowThreat[,c(drunkdrive_LT_ColNum,subjColNum)]
drunkdrive_LT$action = "drunkdrive"
drunkdrive_LT$message = "lowThreat"
# Visually check that columns are as intended:
cbind( colnames(LowThreat[,drunkdrive_LT_ColNum]) ,
colnames(headerInfo[1,drunkdrive_LT_ColNum]) ,
colnames(LowThreat[,drunkdrive_LT_ColNum])
== colnames(headerInfo[1,drunkdrive_LT_ColNum]) ,
unname(unlist(headerInfo[1,drunkdrive_LT_ColNum])) )
steal_LT_ColNum = 397:427
steal_LT = LowThreat[,c(steal_LT_ColNum,subjColNum)]
steal_LT$action = "steal"
steal_LT$message = "lowThreat"
# Visually check that columns are as intended:
cbind( colnames(LowThreat[,steal_LT_ColNum]) ,
colnames(headerInfo[1,steal_LT_ColNum]) ,
colnames(LowThreat[,steal_LT_ColNum])
== colnames(headerInfo[1,steal_LT_ColNum]) ,
unname(unlist(headerInfo[1,steal_LT_ColNum])) )
litter_LT_ColNum = 432:462
litter_LT = LowThreat[,c(litter_LT_ColNum,subjColNum)]
litter_LT$action = "litter"
litter_LT$message = "lowThreat"
# Visually check that columns are as intended:
cbind( colnames(LowThreat[,litter_LT_ColNum]) ,
colnames(headerInfo[1,litter_LT_ColNum]) ,
colnames(LowThreat[,litter_LT_ColNum])
== colnames(headerInfo[1,litter_LT_ColNum]) ,
unname(unlist(headerInfo[1,litter_LT_ColNum])) )
review_LT_ColNum = 467:497
review_LT = LowThreat[,c(review_LT_ColNum,subjColNum)]
review_LT$action = "review"
review_LT$message = "lowThreat"
# Visually check that columns are as intended:
cbind( colnames(LowThreat[,review_LT_ColNum]) ,
colnames(headerInfo[1,review_LT_ColNum]) ,
colnames(LowThreat[,review_LT_ColNum])
== colnames(headerInfo[1,review_LT_ColNum]) ,
unname(unlist(headerInfo[1,review_LT_ColNum])) )
soda_LT_ColNum = 502:532
soda_LT = LowThreat[,c(soda_LT_ColNum,subjColNum)]
soda_LT$action = "soda"
soda_LT$message = "lowThreat"
# Visually check that columns are as intended:
cbind( colnames(LowThreat[,soda_LT_ColNum]) ,
colnames(headerInfo[1,soda_LT_ColNum]) ,
colnames(LowThreat[,soda_LT_ColNum])
== colnames(headerInfo[1,soda_LT_ColNum]) ,
unname(unlist(headerInfo[1,soda_LT_ColNum])) )
listen_LT_ColNum = 537:567
listen_LT = LowThreat[,c(listen_LT_ColNum,subjColNum)]
listen_LT$action = "listen"
listen_LT$message = "lowThreat"
# Visually check that columns are as intended:
cbind( colnames(LowThreat[,listen_LT_ColNum]) ,
colnames(headerInfo[1,listen_LT_ColNum]) ,
colnames(LowThreat[,listen_LT_ColNum])
== colnames(headerInfo[1,listen_LT_ColNum]) ,
unname(unlist(headerInfo[1,listen_LT_ColNum])) )
verbal_LT_ColNum = 572:602
verbal_LT = LowThreat[,c(verbal_LT_ColNum,subjColNum)]
verbal_LT$action = "verbal"
verbal_LT$message = "lowThreat"
# Visually check that columns are as intended:
cbind( colnames(LowThreat[,verbal_LT_ColNum]) ,
colnames(headerInfo[1,verbal_LT_ColNum]) ,
colnames(LowThreat[,verbal_LT_ColNum])
== colnames(headerInfo[1,verbal_LT_ColNum]) ,
unname(unlist(headerInfo[1,verbal_LT_ColNum])) )
donate_LT_ColNum = 607:637
donate_LT = LowThreat[,c(donate_LT_ColNum,subjColNum)]
donate_LT$action = "donate"
donate_LT$message = "lowThreat"
# Visually check that columns are as intended:
cbind( colnames(LowThreat[,donate_LT_ColNum]) ,
colnames(headerInfo[1,donate_LT_ColNum]) ,
colnames(LowThreat[,donate_LT_ColNum])
== colnames(headerInfo[1,donate_LT_ColNum]) ,
unname(unlist(headerInfo[1,donate_LT_ColNum])) )
recycle_LT_ColNum = 642:672
recycle_LT = LowThreat[,c(recycle_LT_ColNum,subjColNum)]
recycle_LT$action = "recycle"
recycle_LT$message = "lowThreat"
# Visually check that columns are as intended:
cbind( colnames(LowThreat[,recycle_LT_ColNum]) ,
colnames(headerInfo[1,recycle_LT_ColNum]) ,
colnames(LowThreat[,recycle_LT_ColNum])
== colnames(headerInfo[1,recycle_LT_ColNum]) ,
unname(unlist(headerInfo[1,recycle_LT_ColNum])) )
vaccine_LT_ColNum = 677:707
vaccine_LT = LowThreat[,c(vaccine_LT_ColNum,subjColNum)]
vaccine_LT$action = "vaccine"
vaccine_LT$message = "lowThreat"
# Visually check that columns are as intended:
cbind( colnames(LowThreat[,vaccine_LT_ColNum]) ,
colnames(headerInfo[1,vaccine_LT_ColNum]) ,
colnames(LowThreat[,vaccine_LT_ColNum])
== colnames(headerInfo[1,vaccine_LT_ColNum]) ,
unname(unlist(headerInfo[1,vaccine_LT_ColNum])) )
colnames(vaccine_LT) = colnames(recycle_LT) = colnames(donate_LT) = colnames(verbal_LT) = colnames(listen_LT) =
colnames(soda_LT) = colnames(review_LT) = colnames(litter_LT) = colnames(steal_LT) = colnames(drunkdrive_LT)
lowThreat = rbind(drunkdrive_LT, steal_LT, litter_LT, review_LT, soda_LT, listen_LT, verbal_LT, donate_LT,
recycle_LT, vaccine_LT)
colnames(lowThreat) = colnames(highThreat)
FinalData = rbind(highThreat, lowThreat)
# Read in data
DataOrig = read.csv( "ReactanceMainData.csv" , header=TRUE )
